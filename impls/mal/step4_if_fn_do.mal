(load-file "../mal/env.mal")
(load-file "../mal/core.mal")

;; EVAL extends this stack trace when propagating exceptions.  If the
;; exception reaches the REPL loop, the full trace is printed.
(def! trace (atom ""))

;; read
(def! READ read-string)


;; eval
(def! LET (fn* [env binds form]
  (if (empty? binds)
    (EVAL form env)
    (do
      (env-set env (first binds) (EVAL (nth binds 1) env))
      (LET env (rest (rest binds)) form)))))

(def! EVAL (fn* [ast env]
  (do
    (if (env-get-or-nil env 'DEBUG-EVAL)
      (prn 'EVAL: ast (env-as-map env)))
    (try*
      (cond
        (symbol? ast)
        (env-get env ast)

        (vector? ast)
        (vec (map (fn* [exp] (EVAL exp env)) ast))

        (map? ast)
        (apply hash-map
          (apply concat (map (fn* [k] [k (EVAL (get ast k) env)]) (keys ast))))

        (list? ast)
        (if (empty? ast)
          ()
          (let* [a0 (first ast)]
            (cond
              (= 'def! a0)
              (env-set env (nth ast 1) (EVAL (nth ast 2) env))

              (= 'let* a0)
              (LET (new-env env) (nth ast 1) (nth ast 2))

              (= 'do a0)
              (nth (map (fn* [exp] (EVAL exp env)) (rest ast)) (- (count ast) 2))

              (= 'if a0)
              (if (EVAL (nth ast 1) env)
                (EVAL (nth ast 2) env)
                (if (> (count ast) 3)
                  (EVAL (nth ast 3) env)))

              (= 'fn* a0)
              (fn* [& args] (EVAL (nth ast 2) (new-env env (nth ast 1) args)))

              "else"
              (let* [f    (EVAL a0 env)
                     args (rest ast)]
                (apply f (map (fn* [exp] (EVAL exp env)) args))))))

        "else"
        ast)

    (catch* exc
      (do
        (swap! trace str "\n  in mal EVAL: " ast)
        (throw exc)))))))

;; print
(def! PRINT pr-str)

;; repl
(def! repl-env (new-env))
(def! rep (fn* [strng]
  (PRINT (EVAL (READ strng) repl-env))))

;; core.mal: defined directly using mal
(map (fn* [sym] (env-set repl-env sym (eval sym))) core_ns)

;; core.mal: defined using the new language itself
(rep "(def! not (fn* [a] (if a false true)))")

;; repl loop
(def! repl-loop (fn* [line]
  (if line
    (do
      (if (not (= "" line))
        (try*
          (println (rep line))
          (catch* exc
            (do
              (println "Uncaught exception:" exc @trace)
              (reset! trace "")))))
      (repl-loop (readline "mal-user> "))))))

;; main
(repl-loop "")
