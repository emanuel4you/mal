⟨Atom,nil⟩ ← •Import "globals.bqn"
⟨Env⟩ ← •Import "env.bqn"
⟨PrStr,PrStrR⟩ ← •Import "printer.bqn"
⟨ReadStr⟩ ← •Import "reader.bqn"

Q ← {∾´'"'∾𝕩∾'"'}
J ← {0=≠𝕩 ? "" ;
     1=≠𝕩 ? ⊑𝕩 ;
     ∾´(⊑𝕩)∾𝕨∾𝕨J 1↓𝕩}

ns ← ⟨
  "+"‿{1∾+´1⊏˘>𝕩}
  "-"‿{1∾-´1⊏˘>𝕩}
  "*"‿{1∾×´1⊏˘>𝕩}
  "/"‿{1∾⌊∘÷´1⊏˘>𝕩}

  "="‿{7∾∧´≡´˘2↕𝕩}
  "<"‿{7∾∧´<´˘2↕1⊸⊑¨𝕩}
  "<="‿{7∾∧´≤´˘2↕1⊸⊑¨𝕩}
  ">"‿{7∾∧´>´˘2↕1⊸⊑¨𝕩}
  ">="‿{7∾∧´≥´˘2↕1⊸⊑¨𝕩}

  "list"‿{3‿𝕩}
  "list?"‿{7∾3=⊑⊑𝕩}
  "empty?"‿{7∾0=≠1⊑⊑𝕩}
  "count"‿{1∾≠1⊑⊑𝕩}

  "bqn-show"‿{•Show ⊑ 𝕩}
  "pr-str"‿{2∾<" "J PrStrR¨𝕩}
  "str"‿{2∾<""J PrStr¨𝕩}
  "prn"‿{•Out " "J PrStrR¨𝕩 ⋄ nil}
  "println"‿{•Out " "J PrStr¨𝕩 ⋄ nil}

  "read-string"‿{ReadStr 1⊑⊑𝕩}
  "slurp"‿{2∾<•FChars 1⊑⊑𝕩}

  "atom"‿{11∾Atom ⊑𝕩}
  "atom?"‿{7∾11=⊑⊑𝕩}
  "deref"‿{𝕊 ⟨11‿a⟩: a.Deref@; ¯1‿"deref: not an atom"}
  "reset!"‿{
    𝕊 ⟨11‿a,v⟩: a.Reset v;
    ¯1‿"reset!: not an atom"}
  "swap!"‿{
    ⟨t‿a,fn⟩ ← 2↑𝕩
    args ← (<a.Deref@) ∾ 2↓𝕩
    f ← {9‿f: f; 10‿x‿y‿z‿f: f}fn
    a.Reset F args}

  "cons"‿{𝕊 x‿⟨t,xs⟩: 3∾<(<x)∾xs ; ¯1‿"cons"}
  "concat"‿{𝕊 ⟨⟩:3‿⟨⟩; 3∾<∾´1⊸⊑¨𝕩}

  "nth"‿{𝕊 ⟨t‿xs,1‿n⟩: {n<≠xs ? n⊑xs ; ¯1‿"out of bounds"}}
  "first"‿{S ⟨t‿xs⟩: {0<≠xs ? ⊑xs ; nil}; nil}
  "rest"‿{𝕊 ⟨t‿⟨⟩⟩: 3‿⟨⟩; 𝕊 ⟨t‿xs⟩: 3∾<1↓xs; 3‿⟨⟩}
⟩

core ⇐ Env@
{𝕊 kw‿f: core.Set kw‿(9‿f)}¨ns
