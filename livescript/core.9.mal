(do

    (def! even? (fn* [x] (= 0 (% x 2))))

    (def! odd? (fn* [x] (= 0 (% (- x 1) 2))))

    (def! compose (fn* [f g] (fn [x] (f (g x)))))

    (def! true? (fn* [x] (= x true)))

    (def! false? (fn* [x] (= x false)))

    (def! fold (fn*
          [f init xs] ;; Tail-recursive implementation
          (let [loop (fn [ret xs]
                         (if (empty? xs)
                             ret
                             (let [[x & xss] xs]
                                  (loop (f ret x) xss))))]
                (loop init xs))))

    (def! foldr (fn*
          [f init xs]
          (let [loop (fn [ret xs]
                         (if (empty? xs)
                             ret
                             (let [x (last xs)
                                   xss (initial xs)]
                                   (loop (f x ret) xss))))]
                (loop init xs))))
                                   

    (def! filter (fn*
          [f xs] ;; Tail-recursive implementation.
          (let [loop (fn [xs ret]
                         (if (empty? xs)
                            ret
                            (loop (rest xs)
                                  (if (f (first xs))
                                      (conj ret (first xs)) ret))))]
                (loop xs []))))

    (def! map (fn*
          [f xs] ;; map in terms of fold
          (fold (fn [acc x] (concat acc [(f x)])) '() xs)))

    (def! rest (fn*
          [xs]
          (if (empty? xs)
              (list)
              (let [[_ & xss] xs] xss))))

    (def! first (fn*
          [xs]
          (if (empty? xs)
               nil
              (let [[x] xs] x))))

    (def! load-file (fn* [f]
          (eval (read-string (str "(do " (slurp f) ")" )))))

    ;; Define functions with more convenience.
    (defmacro! defn (fn* [name bindings & body]
        `(def ~name (fn* ~bindings ~@body))))

    ;; Define macros with more convenience
    (defmacro! defmacro (fn* [name bindings & body]
        `(defmacro! ~name (fn* ~bindings ~@body))))

    (defn apply [f & args]
        (let [arglist (last args)
              inits (initial args)
              combined (map (fn [x] (list 'quote x)) (concat inits arglist))]
            (eval (cons f combined))))

    (defn partial [f & xs]
        (fn [& ys] (apply f (concat xs ys))))

    (defmacro! or (fn* [& xs]
        (if (empty? xs)
            nil
            (if (= 1 (count xs))
                (first xs)
                `(let* [or_FIXME ~(first xs)]
                        (if or_FIXME or_FIXME (or ~@(rest xs))))))))

    (defmacro! cond (fn* [& xs]
        (let [c (count xs)]
            (if (> c 0)
                (let [[fst snd & rst] xs]
                    (list 'if
                        fst
                        snd
                        (if (= 1 (count rst))
                            (first rst)
                            (cons 'cond rst))))))))

    (def! not (fn* [x] (if x false true)))

    (defmacro swap! [a f & xs]
        `(reset! ~a (~f (deref ~a) ~@xs)))
    
    )
